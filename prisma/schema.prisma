datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPurchasedCourse {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  purchasedAt DateTime @default(now())

  user   User   @relation("purchasedUserId", fields: [userId], references: [id])
  course Course @relation("purchasedCourseId", fields: [courseId], references: [id])
}

model Category {
  id          String @id @default(cuid())
  title       String
  description String

  Course   Course?       @relation(fields: [courseId], references: [id])
  courseId String?
  videos   CourseVideo[]
}

model CourseVideo {
  id          String    @id @default(cuid())
  title       String
  description String
  url         String
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
}

model Course {
  id            String                @id @default(cuid())
  title         String
  description   String
  price         Float
  image         String
  author        User                  @relation(name: "CreatedCourses", fields: [authorId], references: [id])
  authorId      String
  purchasedBy   UserPurchasedCourse[] @relation("purchasedCourseId")
  Review        Review[]
  averageRating Float                 @default(5)
  categories    Category[]
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  courseId  String
  userId    String
  createdAt DateTime @default(now())

  course Course @relation(fields: [courseId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String?               @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  userCreatedCourses   Course[]              @relation("CreatedCourses")
  userPurchasedCourses UserPurchasedCourse[] @relation("purchasedUserId")
  Review               Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
